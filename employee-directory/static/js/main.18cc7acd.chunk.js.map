{"version":3,"sources":["Component.js","App.js","index.js"],"names":["Search","className","this","props","searchState","searchedEmployee","childInputRef","employeeList","directSubordinates","backToSearchClick","isEmployee","searchClick","React","Component","SearchForm","type","placeholder","ref","onClick","current","value","SearchResult","myDirectSubordinates","length","map","EMPLOYEE","index","key","includes","App","state","isSearched","searchInput","createRef","searchEmployee","employeeName","a","trim","employeeToSearch","fetchEmployeeData","employeeData","mySubordinateArray","undefined","setState","i","concat","recursiveLoop","then","window","history","pushState","myEmployeeData","toLowerCase","url","fetch","response","json","clearSearchState","location","href","split","queryString","search","URLSearchParams","get","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18cc7acd.chunk.js","sourcesContent":["import React from 'react';\r\n//\r\n\r\n/*Search Component*/\r\nexport class Search extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"searchComponentDiv\">\r\n                \r\n                {\r\n                    this.props.searchState ? \r\n                        <SearchResult searchedEmployee={this.props.searchedEmployee} childInputRef={this.props.childInputRef} employeeList={this.props.employeeList} directSubordinates={this.props.directSubordinates} backToSearchClick={this.props.backToSearchClick} isEmployee={this.props.isEmployee} />\r\n                    :\r\n                        <SearchForm searchClick={this.props.searchClick} childInputRef={this.props.childInputRef} />\r\n                }\r\n            </div>\r\n     \r\n        )\r\n    }\r\n}\r\n\r\n/*Search Form Component*/\r\nclass SearchForm extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"searchDiv\">\r\n                <div className=\"formGroup\">\r\n                    <input type=\"text\" placeholder=\"Employee name\" ref={this.props.childInputRef} />\r\n                    <span className=\"btn\" onClick={() => this.props.searchClick(this.props.childInputRef.current.value)}>Search</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n/*Search Result Component*/\r\nclass SearchResult extends React.Component {\r\n    \r\n    render() {\r\n        let myDirectSubordinates = this.props.directSubordinates;\r\n        return (\r\n            <div className=\"resultDiv\">\r\n                <h3>{ \r\n                        this.props.isEmployee ? \r\n                            (myDirectSubordinates.length < 1) ? (this.props.searchedEmployee + \" do not have subordinates.\") \r\n                                : (\"Subordinates of employee \" + this.props.searchedEmployee + \": \") \r\n                            : \"No such employee!\"\r\n                    }\r\n                </h3>\r\n                <ul>\r\n                    {\r\n                         this.props.employeeList.map((EMPLOYEE, index) => {\r\n                             return (\r\n                                 <li key={index}>{EMPLOYEE + (myDirectSubordinates.includes(EMPLOYEE) ? \" (Direct Subordinate)\" : \" (Indirect Subordinate)\")}</li>\r\n                             )\r\n                        \r\n                        })\r\n                    }\r\n                </ul>\r\n                <span className=\"btn\" onClick={() => this.props.backToSearchClick()}>Back To Search</span>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n//\r\nimport { Search } from './Component';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        isSearched: false,\r\n        isEmployee: false,\r\n        searchedEmployee:\"\",\r\n        employeeList: [],\r\n        directSubordinates: []\r\n    }\r\n\r\n    //=== References ===\r\n    searchInput = React.createRef();\r\n    //\r\n\r\n    componentDidMount() {\r\n        const queryString = window.location.search;\r\n        const queryParams = new URLSearchParams(queryString);\r\n        const employeeName = queryParams.get('name');\r\n        if (employeeName !== null && employeeName.trim() !== \"\"){\r\n            this.setState({\r\n                isSearched:true\r\n            })\r\n            this.searchEmployee(employeeName)\r\n           //console.log(employeeName);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    searchEmployee = async (employeeName) => {\r\n\r\n        if (employeeName.trim() !== \"\"){\r\n            let employeeToSearch = employeeName;\r\n            let employeeData = await this.fetchEmployeeData(employeeToSearch);\r\n            let mySubordinateArray = (employeeData !== null && employeeData[1] !== undefined) ? employeeData[1][\"Direct Subordinates\"] : [];\r\n            //\r\n            //clear state before search\r\n            this.setState({\r\n                employeeList: []\r\n            })\r\n            //\r\n            //update employee state\r\n            this.setState({\r\n                searchedEmployee: employeeName,\r\n                isEmployee: (employeeData[0] !== undefined)\r\n            })\r\n            //\r\n            for (var i = 0; i < mySubordinateArray.length; i++) {\r\n                this.setState({\r\n                    directSubordinates: this.state.directSubordinates.concat(mySubordinateArray[i])\r\n                })\r\n            }\r\n\r\n            //\r\n            this.recursiveLoop(employeeData).then(\r\n                () => {\r\n                    this.setState({\r\n                        isSearched: true\r\n                    })\r\n                    window.history.pushState({ employeeName: employeeName }, '', \"?name=\" + employeeName);\r\n                    //console.log(\"this.state\", this.state);\r\n                }\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    recursiveLoop = async (employeeData) =>{\r\n        let myEmployeeData = \"\";\r\n        let mySubordinateArray = (employeeData[1] !== undefined) ? employeeData[1][\"Direct Subordinates\"] : [];\r\n        for (var i = 0; i < mySubordinateArray.length; i++) {\r\n            if (!this.state.employeeList.includes(mySubordinateArray[i])){\r\n                this.setState({\r\n                    employeeList: this.state.employeeList.concat(mySubordinateArray[i])\r\n                })\r\n            }\r\n            // console.log(\"mySubordinateArray[i]\", mySubordinateArray[i]);\r\n            myEmployeeData = await this.fetchEmployeeData(mySubordinateArray[i])\r\n            if (myEmployeeData[0].toLowerCase() !== \"employee\"){\r\n                 await this.recursiveLoop(myEmployeeData)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fetchEmployeeData = async (employeeName) =>{\r\n\r\n        //const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n        let url = 'https://jellymiso-api.herokuapp.com/api/employees/' + employeeName;\r\n\r\n        // console.log(\"fetching data for\", employeeName, \"full url:\", url)\r\n\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n        return json;\r\n    }\r\n\r\n    clearSearchState = () =>{\r\n        this.setState({\r\n            isSearched: false\r\n        })\r\n        window.history.pushState({}, '', window.location.href.split(\"?\")[0]);\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div id=\"employee-directory\">\r\n                <h1>{this.state.isSearched ? \"Employee Overview\" : \"Employee Explorer\"}</h1>\r\n                <Search childInputRef={this.searchInput} searchedEmployee={this.state.searchedEmployee} searchClick={this.searchEmployee} searchState={this.state.isSearched} employeeList={this.state.employeeList} directSubordinates={this.state.directSubordinates} backToSearchClick={this.clearSearchState} isEmployee={this.state.isEmployee} />  \r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './style/index.css';\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}