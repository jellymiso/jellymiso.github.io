{"version":3,"sources":["Component.js","App.js","index.js"],"names":["Search","className","this","props","searchState","searchedEmployee","childInputRef","employeeList","directSubordinates","backToSearchClick","isEmployee","searchClick","fuzzySearch","showfuzzyResult","fuzzyResult","setFuzzyText","React","Component","SearchForm","highlightText","text","textToHighlight","__html","replace","RegExp","type","placeholder","ref","onChange","current","value","onClick","map","EMPLOYEE","index","key","dangerouslySetInnerHTML","SearchResult","myDirectSubordinates","length","includes","LoadSpinner","isRender","App","state","isSearched","isLoadRender","searchInput","createRef","searchEmployee","employeeName","a","setState","trim","employeeToSearch","fetchEmployeeData","employeeData","mySubordinateArray","undefined","i","concat","recursiveLoop","then","window","history","pushState","myEmployeeData","toLowerCase","url","fetch","response","json","getAllEmployeeNames","query","myList","data","push","clearSearchState","location","href","split","queryString","search","URLSearchParams","get","id","ReactDOM","render","document","getElementById"],"mappings":"kPAIaA,EAAb,uKAEQ,OACI,yBAAKC,UAAU,sBAEPC,KAAKC,MAAMC,YACP,kBAAC,EAAD,CACIC,iBAAkBH,KAAKC,MAAME,iBAC7BC,cAAeJ,KAAKC,MAAMG,cAC1BC,aAAcL,KAAKC,MAAMI,aACzBC,mBAAoBN,KAAKC,MAAMK,mBAC/BC,kBAAmBP,KAAKC,MAAMM,kBAC9BC,WAAYR,KAAKC,MAAMO,aAE3B,kBAAC,EAAD,CACIC,YAAaT,KAAKC,MAAMQ,YACxBL,cAAeJ,KAAKC,MAAMG,cAC1BM,YAAaV,KAAKC,MAAMS,YACxBC,gBAAiBX,KAAKC,MAAMU,gBAC5BC,YAAaZ,KAAKC,MAAMW,YACxBC,aAAcb,KAAKC,MAAMY,oBApBrD,GAA4BC,IAAMC,WA8B5BC,E,4MAEFC,cAAgB,SAACC,EAAMC,GAKnB,MAAM,CACFC,OALQF,EAAKG,QACb,IAAIC,OAAOH,EAAiB,MAC5B,kC,uDAOE,IAAD,OACL,OACI,yBAAKpB,UAAU,aACX,yBAAKA,UAAU,aACX,2BAAOwB,KAAK,OAAOC,YAAY,gBAAgBC,IAAKzB,KAAKC,MAAMG,cAAesB,SAAU,kBAAM,EAAKzB,MAAMS,YAAY,EAAKT,MAAMG,cAAcuB,QAAQC,UACtJ,0BAAM7B,UAAU,MAAM8B,QAAS,kBAAM,EAAK5B,MAAMQ,YAAY,EAAKR,MAAMG,cAAcuB,QAAQC,SAA7F,UAEI5B,KAAKC,MAAMU,iBAEP,wBAAIZ,UAAU,gBAENC,KAAKC,MAAMW,YAAYkB,KAAI,SAACC,EAAUC,GAClC,OACI,wBACIC,IAAKD,EACLH,QAAS,kBAAM,EAAK5B,MAAMY,aAAakB,IACvCG,wBACI,EAAKjB,cACDc,EACA,EAAK9B,MAAMG,cAAcuB,QAAQC,mB,GA/BhEd,IAAMC,WAiDzBoB,E,uKAEQ,IAAD,OACDC,EAAuBpC,KAAKC,MAAMK,mBACtC,OACI,yBAAKP,UAAU,aACX,4BACQC,KAAKC,MAAMO,WACN4B,EAAqBC,OAAS,EAAMrC,KAAKC,MAAME,iBAAmB,6BAC5D,4BAA8BH,KAAKC,MAAME,iBAAmB,KACjE,qBAGd,4BAESH,KAAKC,MAAMI,aAAayB,KAAI,SAACC,EAAUC,GACnC,OACI,wBAAIC,IAAKD,GAAQD,GAAYK,EAAqBE,SAASP,GAAY,wBAA0B,gCAMlH,0BAAMhC,UAAU,MAAM8B,QAAS,kBAAM,EAAK5B,MAAMM,sBAAhD,uB,GAvBWO,IAAMC,WA6BpBwB,EAAb,uKAEQ,OACI,yBAAKxC,UAAW,gBAAkBC,KAAKC,MAAMuC,SAAW,GAAK,SACzD,yBAAKzC,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,gBACX,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,gCAGhG,yBAAKA,UAAU,eAAf,6DAVpB,GAAiCe,IAAMC,WCqExB0B,E,4MA/KXC,MAAQ,CACJC,YAAY,EACZC,cAAa,EACbpC,YAAY,EACZL,iBAAiB,GACjBE,aAAc,GACdC,mBAAoB,GACpBK,iBAAiB,EACjBC,YAAa,I,EAIjBiC,YAAc/B,IAAMgC,Y,EAkBpBC,e,uCAAiB,WAAOC,GAAP,qBAAAC,EAAA,yDACb,EAAKC,SAAS,CACVN,cAAa,IAGW,KAAxBI,EAAaG,OALJ,wBAMLC,EAAmBJ,EANd,SAOgB,EAAKK,kBAAkBD,GAPvC,OAqBT,IAdIE,EAPK,OAQLC,EAAuC,OAAjBD,QAA6CE,IAApBF,EAAa,GAAoBA,EAAa,GAAG,uBAAyB,GAG7H,EAAKJ,SAAS,CACV7C,aAAc,KAIlB,EAAK6C,SAAS,CACV/C,iBAAkB6C,EAClBxC,gBAAiCgD,IAApBF,EAAa,KAGrBG,EAAI,EAAGA,EAAIF,EAAmBlB,OAAQoB,IAC3C,EAAKP,SAAS,CACV5C,mBAAoB,EAAKoC,MAAMpC,mBAAmBoD,OAAOH,EAAmBE,MAKpF,EAAKE,cAAcL,GAAcM,MAC7B,WACI,EAAKV,SAAS,CACVP,YAAY,EACZC,cAAa,IAEjBiB,OAAOC,QAAQC,UAAU,CAAEf,aAAcA,GAAgB,GAAI,SAAWA,MAlCvE,4C,wDA0CjBW,c,uCAAgB,WAAOL,GAAP,mBAAAL,EAAA,sDACRe,EAAiB,GACjBT,OAA0CC,IAApBF,EAAa,GAAoBA,EAAa,GAAG,uBAAyB,GAC3FG,EAAI,EAHD,YAGIA,EAAIF,EAAmBlB,QAH3B,wBAIH,EAAKK,MAAMrC,aAAaiC,SAASiB,EAAmBE,KACrD,EAAKP,SAAS,CACV7C,aAAc,EAAKqC,MAAMrC,aAAaqD,OAAOH,EAAmBE,MANhE,SAUe,EAAKJ,kBAAkBE,EAAmBE,IAVzD,UAWgC,cADxCO,EAVQ,QAWW,GAAGC,cAXd,kCAYG,EAAKN,cAAcK,GAZtB,QAGmCP,IAHnC,2D,wDAkBhBJ,kB,uCAAoB,WAAOL,GAAP,mBAAAC,EAAA,6DAGZiB,EAAM,iDAAmDlB,EAH7C,SAOOmB,MAAMD,GAPb,cAOVE,EAPU,gBAQGA,EAASC,OARZ,cAQVA,EARU,yBASTA,GATS,2C,wDAYpBC,oB,sBAAsB,8BAAArB,EAAA,4DACR,gDADQ,SAEKkB,MADb,iDADQ,cAEZC,EAFY,gBAGCA,EAASC,OAHV,cAGZA,EAHY,yBAIXA,GAJW,2C,EAOtB3D,YAAc,SAAC6D,GACX,IAAIC,EAAS,GACb,EAAKtB,SAAS,CACVvC,gBAA2B,OAAV4D,GAAmC,KAAjBA,EAAMpB,SAE/B,OAAVoB,GAAmC,KAAjBA,EAAMpB,QACxB,EAAKmB,sBAAsBV,MACvB,SAAAa,GAGIA,EAAK3C,KAAI,SAACC,EAAUC,GACZD,EAASkC,cAAc3B,SAASiC,EAAMN,gBACtCO,EAAOE,KAAK3C,MAGpB,EAAKmB,SAAS,CACVtC,YAAa4D,Q,EAQjCG,iBAAmB,WACf,EAAKzB,SAAS,CACVP,YAAY,IAEhBkB,OAAOC,QAAQC,UAAU,GAAI,GAAIF,OAAOe,SAASC,KAAKC,MAAM,KAAK,K,EAIrEjE,aAAe,SAACK,GACZ,EAAK2B,YAAYlB,QAAQC,MAAQV,EACjC,EAAKgC,SAAS,CACVvC,iBAAiB,K,kEAhIrB,IAAMoE,EAAclB,OAAOe,SAASI,OAE9BhC,EADc,IAAIiC,gBAAgBF,GACPG,IAAI,QAChB,OAAjBlC,GAAiD,KAAxBA,EAAaG,SACtCnD,KAAKkD,SAAS,CACVP,YAAW,IAEf3C,KAAK+C,eAAeC,M,+EA8HxB,OACI,yBAAKmC,GAAG,SACJ,yBAAKA,GAAG,sBACJ,4BAAKnF,KAAK0C,MAAMC,WAAa,oBAAsB,qBACnD,kBAAC,EAAD,CACIvC,cAAeJ,KAAK6C,YACpB1C,iBAAkBH,KAAK0C,MAAMvC,iBAC7BM,YAAaT,KAAK+C,eAClB7C,YAAaF,KAAK0C,MAAMC,WACxBtC,aAAcL,KAAK0C,MAAMrC,aACzBC,mBAAoBN,KAAK0C,MAAMpC,mBAC/BC,kBAAmBP,KAAK2E,iBACxBnE,WAAYR,KAAK0C,MAAMlC,WACvBE,YAAaV,KAAKU,YAClBC,gBAAiBX,KAAK0C,MAAM/B,gBAC5BC,YAAaZ,KAAK0C,MAAM9B,YACxBC,aAAcb,KAAKa,gBAG3B,kBAAC,EAAD,CAAa2B,SAAUxC,KAAK0C,MAAME,oB,GA1KhC9B,IAAMC,W,MCAxBqE,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.4487cbbe.chunk.js","sourcesContent":["import React from 'react';\r\n//\r\n\r\n/*Search Component*/\r\nexport class Search extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"searchComponentDiv\">\r\n                {\r\n                    this.props.searchState ? \r\n                        <SearchResult \r\n                            searchedEmployee={this.props.searchedEmployee} \r\n                            childInputRef={this.props.childInputRef} \r\n                            employeeList={this.props.employeeList} \r\n                            directSubordinates={this.props.directSubordinates} \r\n                            backToSearchClick={this.props.backToSearchClick} \r\n                            isEmployee={this.props.isEmployee} />\r\n                    :\r\n                        <SearchForm \r\n                            searchClick={this.props.searchClick} \r\n                            childInputRef={this.props.childInputRef} \r\n                            fuzzySearch={this.props.fuzzySearch}\r\n                            showfuzzyResult={this.props.showfuzzyResult}\r\n                            fuzzyResult={this.props.fuzzyResult} \r\n                            setFuzzyText={this.props.setFuzzyText}\r\n                        />\r\n                }\r\n            </div>\r\n     \r\n        )\r\n    }\r\n}\r\n\r\n/*Search Form Component*/\r\nclass SearchForm extends React.Component {\r\n\r\n    highlightText = (text, textToHighlight) => {\r\n        var myRet = text.replace(\r\n            new RegExp(textToHighlight, \"gi\"), \r\n            \"<span class='bold'>$&</span>\"\r\n        );\r\n        return{\r\n            __html: myRet\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"searchDiv\">\r\n                <div className=\"formGroup\">\r\n                    <input type=\"text\" placeholder=\"Employee name\" ref={this.props.childInputRef} onChange={() => this.props.fuzzySearch(this.props.childInputRef.current.value)} />\r\n                    <span className=\"btn\" onClick={() => this.props.searchClick(this.props.childInputRef.current.value)}>Search</span>\r\n                    {\r\n                        this.props.showfuzzyResult &&\r\n                        (\r\n                            <ul className=\"fuzzy-search\">\r\n                                {\r\n                                    this.props.fuzzyResult.map((EMPLOYEE, index) => {\r\n                                        return( \r\n                                            <li \r\n                                                key={index} \r\n                                                onClick={() => this.props.setFuzzyText(EMPLOYEE)}\r\n                                                dangerouslySetInnerHTML={\r\n                                                    this.highlightText(\r\n                                                        EMPLOYEE, \r\n                                                        this.props.childInputRef.current.value\r\n                                                    )\r\n                                                }>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n/*Search Result Component*/\r\nclass SearchResult extends React.Component {\r\n    \r\n    render() {\r\n        let myDirectSubordinates = this.props.directSubordinates;\r\n        return (\r\n            <div className=\"resultDiv\">\r\n                <h3>{ \r\n                        this.props.isEmployee ? \r\n                            (myDirectSubordinates.length < 1) ? (this.props.searchedEmployee + \" do not have subordinates.\") \r\n                                : (\"Subordinates of employee \" + this.props.searchedEmployee + \": \") \r\n                            : \"No such employee!\"\r\n                    }\r\n                </h3>\r\n                <ul>\r\n                    {\r\n                         this.props.employeeList.map((EMPLOYEE, index) => {\r\n                             return (\r\n                                 <li key={index}>{EMPLOYEE + (myDirectSubordinates.includes(EMPLOYEE) ? \" (Direct Subordinate)\" : \" (Indirect Subordinate)\")}</li>\r\n                             )\r\n                        \r\n                        })\r\n                    }\r\n                </ul>\r\n                <span className=\"btn\" onClick={() => this.props.backToSearchClick()}>Back To Search</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class LoadSpinner extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className={\"page-loader \" + (this.props.isRender ? \"\" : \"hide\")}>\r\n                <div className=\"loader-div\">\r\n                    <div className=\"page-spinner-wrap\">\r\n                        <div className=\"page-spinner\">\r\n                            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"loading-msg\">Browsing through employees' data, please&nbsp;wait...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\n//\r\nimport { Search, LoadSpinner } from './Component';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        isSearched: false,\r\n        isLoadRender:false,\r\n        isEmployee: false,\r\n        searchedEmployee:\"\",\r\n        employeeList: [],\r\n        directSubordinates: [],\r\n        showfuzzyResult: false,\r\n        fuzzyResult: [],\r\n    }\r\n\r\n    //=== References ===\r\n    searchInput = React.createRef();\r\n    //\r\n\r\n    componentDidMount() {\r\n        const queryString = window.location.search;\r\n        const queryParams = new URLSearchParams(queryString);\r\n        const employeeName = queryParams.get('name');\r\n        if (employeeName !== null && employeeName.trim() !== \"\"){\r\n            this.setState({\r\n                isSearched:true\r\n            })\r\n            this.searchEmployee(employeeName)\r\n           //console.log(employeeName);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    searchEmployee = async (employeeName) => {\r\n        this.setState({\r\n            isLoadRender:true\r\n        })\r\n\r\n        if (employeeName.trim() !== \"\"){\r\n            let employeeToSearch = employeeName;\r\n            let employeeData = await this.fetchEmployeeData(employeeToSearch);\r\n            let mySubordinateArray = (employeeData !== null && employeeData[1] !== undefined) ? employeeData[1][\"Direct Subordinates\"] : [];\r\n            //\r\n            //clear state before search\r\n            this.setState({\r\n                employeeList: []\r\n            })\r\n            //\r\n            //update employee state\r\n            this.setState({\r\n                searchedEmployee: employeeName,\r\n                isEmployee: (employeeData[0] !== undefined)\r\n            })\r\n            //\r\n            for (var i = 0; i < mySubordinateArray.length; i++) {\r\n                this.setState({\r\n                    directSubordinates: this.state.directSubordinates.concat(mySubordinateArray[i])\r\n                })\r\n            }\r\n\r\n            //\r\n            this.recursiveLoop(employeeData).then(\r\n                () => {\r\n                    this.setState({\r\n                        isSearched: true,\r\n                        isLoadRender:false\r\n                    })\r\n                    window.history.pushState({ employeeName: employeeName }, '', \"?name=\" + employeeName);\r\n                    //console.log(\"this.state\", this.state);\r\n                }\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    recursiveLoop = async (employeeData) =>{\r\n        let myEmployeeData = \"\";\r\n        let mySubordinateArray = (employeeData[1] !== undefined) ? employeeData[1][\"Direct Subordinates\"] : [];\r\n        for (var i = 0; i < mySubordinateArray.length; i++) {\r\n            if (!this.state.employeeList.includes(mySubordinateArray[i])){\r\n                this.setState({\r\n                    employeeList: this.state.employeeList.concat(mySubordinateArray[i])\r\n                })\r\n            }\r\n            // console.log(\"mySubordinateArray[i]\", mySubordinateArray[i]);\r\n            myEmployeeData = await this.fetchEmployeeData(mySubordinateArray[i])\r\n            if (myEmployeeData[0].toLowerCase() !== \"employee\"){\r\n                 await this.recursiveLoop(myEmployeeData)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fetchEmployeeData = async (employeeName) =>{\r\n\r\n        //const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n        let url = 'https://jellymiso.herokuapp.com/api/employees/' + employeeName;\r\n\r\n        // console.log(\"fetching data for\", employeeName, \"full url:\", url)\r\n\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n        return json;\r\n    }\r\n\r\n    getAllEmployeeNames = async () =>{\r\n        let url = 'https://jellymiso.herokuapp.com/api/employees';\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n        return json;\r\n    }\r\n\r\n    fuzzySearch = (query) =>{\r\n        let myList = [];\r\n        this.setState({\r\n            showfuzzyResult: query !== null && query.trim() !== \"\"\r\n        })\r\n        if (query !== null && query.trim() !== \"\"){\r\n            this.getAllEmployeeNames().then(\r\n                data => {\r\n                    //console.log(\"data\", data)\r\n\r\n                    data.map((EMPLOYEE, index) => {\r\n                        if (EMPLOYEE.toLowerCase().includes(query.toLowerCase())) {\r\n                            myList.push(EMPLOYEE)\r\n                        }\r\n                    })\r\n                    this.setState({\r\n                        fuzzyResult: myList\r\n                    })\r\n                    //console.log(this.state.fuzzyResult)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    clearSearchState = () =>{\r\n        this.setState({\r\n            isSearched: false\r\n        })\r\n        window.history.pushState({}, '', window.location.href.split(\"?\")[0]);\r\n\r\n    }\r\n\r\n    setFuzzyText = (text) => {\r\n        this.searchInput.current.value = text;\r\n        this.setState({\r\n            showfuzzyResult: false\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div id=\"myApp\">\r\n                <div id=\"employee-directory\">\r\n                    <h1>{this.state.isSearched ? \"Employee Overview\" : \"Employee Explorer\"}</h1>\r\n                    <Search \r\n                        childInputRef={this.searchInput} \r\n                        searchedEmployee={this.state.searchedEmployee} \r\n                        searchClick={this.searchEmployee} \r\n                        searchState={this.state.isSearched} \r\n                        employeeList={this.state.employeeList} \r\n                        directSubordinates={this.state.directSubordinates} \r\n                        backToSearchClick={this.clearSearchState} \r\n                        isEmployee={this.state.isEmployee}\r\n                        fuzzySearch={this.fuzzySearch}\r\n                        showfuzzyResult={this.state.showfuzzyResult}\r\n                        fuzzyResult={this.state.fuzzyResult}\r\n                        setFuzzyText={this.setFuzzyText}\r\n                     />\r\n                </div>\r\n                <LoadSpinner isRender={this.state.isLoadRender} />\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './style/index.css';\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}